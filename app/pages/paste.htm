<!doctype html>
<html>
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<title>index.htm</title>
<link rel="icon" type="image/x-icon" href="/favicon.ico" />
<style>
html, body, div, span, img, a, canvas, pre, textarea, * {
    box-sizing: border-box;
}
textarea {
    white-space: normal;
}
body {
    height: 100vh;
    width: 100vw;
    margin: 0;
    font-family: "Consolas", 'Courier New', Courier, monospace;
}
</style>


<script type="text/javascript" src="/util.js"></script>
<script type="text/javascript" src="https://apis.google.com/js/api.js"></script>
<script type="text/javascript" src="/google_api_library.js"></script>


</head>
<body>
<style>
#background {
    position: fixed;
    width: 100vw;
    height: 100vh;
    z-index: -99;
    opacity: 0.5;
}

.button {
    border: 1px solid #aaa;
    border-radius: 2px;
    user-select: none;
    cursor: pointer;
    background: rgba(255, 255, 255, 0.5);

    display: inline-flex;
    align-items: center;
    justify-content: center;
}
.button:hover {
    /*
    transform: translateY(1px);
    */
    background: rgba(235, 235, 235, 0.5);
}
.button:active {
    background: rgba(200, 200, 200, 0.5);
}


#login_button, #clear_clips, #file_label {
    margin-right: 15px;
    width: 120px;
    height: 70px;
    margin-right: 15px;
}

#clip_canvas {
    border: 1px solid #aaa;
}

#file_upload {
    display: none;
}

.clip_item {
    border: 1px solid #aaa;
    border-radius: 2px;
    width: 100%;
    height: 10vh;

    display: inline-flex;
    flex-direction: row;
    align-items: center;
}

.clip_item > .cp,
.clip_item > .rm,
.clip_item > .update,
.clip_item > .dl {
    height: 8vh;
    flex: 0 0 8vh;
    margin-right: 15px;
}
.clip_item > img {
    flex: 1 1 auto;
    max-height: 100%;
    object-fit: scale-down;
    object-position: left;
}
.clip_item > .text {
    flex: 1 1 auto;
    margin-right: 15px;
    height: 8vh;
    max-height: 8vh;
}

</style>

<div id="background"></div>
<input id="file_upload" type="file" accept="*/*" multiple="false"/>

<span id="login_button" class="button">login</span
><span id="file_label" class="button">select file</span
><span id="clear_clips" class="button">clear clips</span
><br />
<h5>selected</h5>
<textarea id="clip_area"></textarea><br />

<script>
const background = document.getElementById("background");
const login_button = document.getElementById("login_button");
const file_upload = document.getElementById("file_upload");
const clear_clips = document.getElementById("clear_clips");
const file_label = document.getElementById("file_label");
const clip_area = document.getElementById("clip_area");


login_button.addEventListener("click", e => {
    if(window.hasOwnProperty("signIn")){
        if(typeof signIn === "function"){
            signIn();
        } else if(signIn){
            console.log("%cuser has already signed in", "color:#22d");
        }
    }
});
file_label.addEventListener("click", e => {
    // upload button listener
    file_upload.click();
});
file_upload.addEventListener("change", async e => {
    const f = file_upload.files[0];
    if(!f) return;
    let buf = await f.readAs("buffer");
    console.log('<input type="file"> received object File(' +
        `name=${f.name}, type=${f.type}, size=${f.size}), ` +
        `head(c=100)=${
            btoa(String.fromCharCode(...new Uint8Array(buf.slice(0,100))))
        }`);
    pasteClip(buf, f.type, f.name);
});

clear_clips.addEventListener("click", async e => {
    (await listAppFolder()).forEach((f, i) => {
        deleteFromAppFolderByID(f.id);
        console.log("deleting:", f.id);
    })
    location.reload(true);
});


window.addEventListener("paste", async function onPaste(e){
    function printInfo(i, t, s){
        if(s.length > 60){
            s = s.slice(0, 60) + "...";
        }
        console.log(`paste item #${i} <${t}>: ${s}`);
    }

    var data = (e.clipboardData || window.clipboardData ||
            e.originalEvent && e.originalEvent.clipboardData);
    var items = data && data.items;

    let text = data.getData("text");
    if(text){
        printInfo(-1, "string", text);
        pasteClip(text, "text/plain");
        return;
    }

    if(!items || !items.length){
        console.warn("paste event triggered but no items received");
        return;
    }

    console.log("data trasnsfer list:", items);

    for(const [i, item] of Array.prototype.entries.call(items)){
        if(item.kind === "string" && item.type.match(/^text/)){
            text = await new Promise(resolve => item.getAsString(resolve));
            printInfo(i, "string", text);
        } else if(item.kind == "file"){
            var f = item.getAsFile();
            let buf = await f.readAs("buffer");
            printInfo(i, "file<buffer>", buf);
            pasteClip(buf, f.type, f.name);
        }
    }
});


async function showImageInClipArea(data){
    if(!(data instanceof Blob)){
        data = await new Response(data).blob();
    }
    clip_area.style.background =
    `center / contain no-repeat url(${URL.createObjectURL(data)})`;
}

async function addClipItem({
        type, name, location, body, id=randomstring(16), blob
}){
    const parent = document.body;
    const mouseenter_listener = addClipItem.mel || (
        addClipItem.mel = e => {
            background.style.background =
                `center / contain no-repeat url(${
                    e.target.querySelector("img").src
                })`;
    });
    const create_button = addClipItem.cb || (
        addClipItem.cb = (classes, label, onclick) => {
            let s = document.createElement("span");
            s.className = classes;
            s.innerText = label;
            s.addEventListener("click", onclick);
            return s;
        }
    );

    if(!addClipItem.firstRun){
        console.log("%cadded first clip item %s sec after page loaded",
                "color: #22d", performance.now() / 1000);
        addClipItem.firstRun = true;
    }

    var elem = document.createElement("span");
    elem.classList.add("clip_item");
    elem.id = id;

    var rm = create_button("rm button", "remove", e => {
        removePasteItemByID(id);
    });

    var cp = create_button("cp button", "copy", e => {

    });

    if(type.match(/^image/)){
        let img = new Image();
        if(!blob) blob = await fetchFromAppFolderByID(id).blob();
        img.src = URL.createObjectURL(blob);
        elem.addEventListener("mouseenter", mouseenter_listener);

        let dl = create_button("dl button", "download", e => {

        });

        elem.appendChild(img);
        elem.appendChild(dl);
    } else if(type.match(/^text/)){
        let text = document.createElement("textarea");
        text.className = "text";
        text.innerText = body;

        let update = create_button("update button", "update", e => {

        });

        elem.appendChild(text);
        elem.appendChild(update);
    }

    elem.appendChild(rm);
    elem.appendChild(cp);
    parent.appendChild(elem);
}

async function pasteClip(data, type, name){
    if(type.match(/^image/)){
        let blob = await new Response(data).blob();
        showImageInClipArea(blob);
        let item = addPasteItem(data, type, name);
        item = await item;
        item.blob = blob;
        addClipItem(item);
    } else if(type.match(/^text/)){
        if(typeof data !== "string"){
            console.error("pasteClip(): pasted text but not passing string");
            return;
        }
        addClipItem({
            type: type,
            body: data,
        });
        addPasteItem(data, type, name);
    }
}

(async () => {
    login_button.innerText = "login";
    while(!access_token ||
        await access_token.state === "pending"
    ) await sleep(200);
    console.log("access token resolved:", await access_token);
    console.log("%ccontinue main thread jobs", "color: #2f2;");
    login_button.innerText = "logout";

    let first = true;
    while(true){
        let info = await getPasteInfo();
        let list = [...document.querySelectorAll(".clip_item")].map(e => e.id);
        [...Array(info.length).keys()].forEach(async i => {
            let item = info[i];
            let index = list.indexOf(item.id);
            if(index >= 0){
                list.splice(index, 1);
            } else{
                if(item.location) // non plain text
                    item.blob = await(
                        await fetchFromAppFolderByID(item.id)).blob();
                addClipItem(item);
            }
        });
        list.forEach(id => {
            let elem = document.getElementById(id);
            elem.parentElement.removeChild(elem);
        });
        if(first && !(first = false))
            console.log("%cfinished first initialization, took %s sec",
                    "color: #22d", performance.now() / 1000);
        await sleep(200);
    }
})();

function func1(){
    (async () => {
        await [...Array(5).keys()].forEach(async i => {
            console.log(`started task #${i}`);
            console.log(`task #${i} lasted ${
                await (t => new Promise(resolve =>
                    setTimeout(resolve, t, t)))(Math.random() * 5000)
            }`);
            console.log(`ended task #${i}`);
        });
        console.log("after code block");
    })();
}

function func2(){
    (async () => {
        let a = await new Promise(resolve => Promise.resolve(resolve));
    })();
}

document.addEventListener("load", e => {
    console.log("document laoded");
});


console.log(`"onhashchange" in window: ${"onhashchange" in window}`);
window.addEventListener("hashchange", (e) =>{
  console.log("hash: " + window.location.hash);
}, false);
console.log(`window.onhashchange: ${window.onhashchange}`);
window.location.hash = "HI";
</script>
</body>
</html>