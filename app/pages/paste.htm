<!doctype html>
<html>
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<title>index.htm</title>
<link rel="icon" type="image/x-icon" href="/favicon.ico" />
<style>
* {
    box-sizing: border-box;
}
textarea {
    white-space: normal;
}
body {
    height: 100vh;
    width: 100vw;
    margin: 0;
    font-family: "Consolas", 'Courier New', Courier, monospace;
}
</style>

<script>

["log", "error"].reduce((l, r) => l(r) || l, type => {
    let pending = [];
    let elem;
    let log = console[type].bind(window.console);

    console[type] = (...args) => {
        log(...args);
        pending.push(...args, "\n");
        if(document.readyState !== "loading"){
            if(!elem) elem = document.querySelector("#console");
            if(!elem) return; 
            let text = "";
            while(pending.length){
                let a = pending.shift();
                text += isPrimitive(a) ? (""+a) : JSON.stringify(a);
            }
            elem.innerText += text;
        }
    };
});

</script>

<script type="text/javascript" src="/util.js"></script>
<script type="text/javascript" src="https://apis.google.com/js/api.js"></script>
<script type="text/javascript" src="/google_api_library.js"></script>
<!--
<script src="https://raw.github.com/pimterry/loglevel/master/dist/loglevel.min.js"></script>
-->
<script src="https://rawgit.com/pimterry/loglevel/master/dist/loglevel.min.js"></script>


</head>
<body>
<style>
#background {
    position: fixed;
    width: 100vw;
    height: 100vh;
    z-index: -99;
    opacity: 0.5;
}

.button {
    border: 1px solid #aaa;
    border-radius: 2px;
    user-select: none;
    cursor: pointer;
    background: rgba(255, 255, 255, 0.5);

    display: inline-flex;
    align-items: center;
    justify-content: center;
}
.button:hover {
    /*
    transform: translateY(1px);
    */
    background: rgba(235, 235, 235, 0.5);
}
.button:active {
    background: rgba(200, 200, 200, 0.5);
}


#login_button, #clear_clips, #file_label {
    margin-right: 15px;
    height: 70px;
    flex: 0 0 120px;
}
#console_container {
    height: 70px;
    flex: 1 1 auto;
    display: inline-flex;
    position: relative;
}
#console {
    overflow-y: scroll;
    width: 100%;
    margin: 0;
    border: 1px solid #aaa;
}
#console:hover {
    background: rgba(255, 255, 255, 0.9);
    height: 80vh;
    position: absolute;
}
#clip_canvas {
    border: 1px solid #aaa;
}

#file_upload {
    display: none;
}

.clip_item {
    border: 1px solid #aaa;
    border-radius: 2px;
    width: 100%;
    height: 10vh;

    display: inline-flex;
    flex-direction: row;
    align-items: center;
}

.clip_item > .cp,
.clip_item > .rm,
.clip_item > .update,
.clip_item > .dl {
    height: 8vh;
    flex: 0 0 8vh;
    margin-right: 15px;
}
.clip_item > img {
    flex: 1 1 auto;
    max-height: 100%;
    object-fit: scale-down;
    object-position: left;
}
.clip_item > .text {
    flex: 1 1 auto;
    margin-right: 15px;
    height: 8vh;
    max-height: 8vh;
}

</style>

<div id="background"></div>
<input id="file_upload" type="file" accept="*/*" multiple="false"/>

<div style="display: flex">
    <span id="login_button" class="button">login</span
    ><span id="file_label" class="button">select file</span
    ><span id="clear_clips" class="button">clear clips</span
    ><span id="console_container"><pre id="console"></pre></span>
</div>
<h5>selected</h5>
<textarea id="clip_area"></textarea><br />
<div id="pasteboard"></div>

<script>
const background = document.getElementById("background");
const login_button = document.getElementById("login_button");
const file_upload = document.getElementById("file_upload");
const clear_clips = document.getElementById("clear_clips");
const file_label = document.getElementById("file_label");
const clip_area = document.getElementById("clip_area");


login_button.addEventListener("click", e => {
    if(window.hasOwnProperty("signIn")){
        if(typeof signIn === "function"){
            signIn();
        } else if(signIn){
            console.log("%cuser has already signed in", "color:#22d");
        }
    }
});
file_label.addEventListener("click", e => {
    // upload button listener
    file_upload.click();
});
file_upload.addEventListener("change", async e => {
    const f = file_upload.files[0];
    if(!f) return;
    PasteBoard.add(f.type, f, f.name);
    console.log('%c<input type="file">', "color: #2d2",
        `received File(name=${f.name}, type=${f.type}, size=${f.size}), ` +
        "head(c=100)=" + btoa(String.fromCharCode(
        ...(await f.readAs("text")).slice(0,100))));
});

clear_clips.addEventListener("click", async e => {
    (await listAppFolder()).forEach((f, i) => {
        deleteFromAppFolderByID(f.id);
        console.log("deleting:", f.id);
    });
    window.stop();
    location.reload(true);
    // PasteInfo.id = null;
});

const PasteBoard = (self => {
    let pasteboard = document.getElementById("pasteboard");
    Object.assign(pasteboard, self);
    return pasteboard;
})({
    mouseenter_listener(e){
        background.style.background = 
                `center / contain no-repeat url(${
                e.target.querySelector("img").src})`;
    },
    create_button(classes, label, onclick){
        let s = document.createElement("span");
        s.className = classes;
        s.innerText = label;
        s.addEventListener("click", onclick);
        return s;
    },
    async add(type, data, name, location, id, local=true){
        if(!this.firstRan && ( this.firstRan = true )) console.log(
                "%cadded first clip item %s sec after page load",
                "color: #22d", performance.now() / 1000);

        if(local) await PasteInfo.add(type, data, name, location, id, true);

        let item = document.createElement("span");
        item.classList.add("clip_item");
        item.id = id;

        let rm = this.create_button("rm button", "remove", e => {

        });

        let cp = this.create_button("cp button", "copy", e => {

        });

        if(type.match(/^image/)){
            let img = new Image();
            let blob = data instanceof Blob ? data :
                    local ? await new Response(data).blob() :
                    await PasteInfo.getBlob(id);
            let url = URL.createObjectURL(blob);
            let dl = this.create_button("dl button", "download", e => {

            });

            img.src = url;
            clip_area.style.background =
                `center / contain no-repeat url(${url})`;

            
            item.addEventListener("mouseenter", this.mouseenter_listener);
            item.appendChild(img);
            item.appendChild(dl);
        
        } else if(type.match(/^text/)){
            let text = document.createElement("textarea");
            text.className = "text";
            text.innerText = data == null ? PasteInfo.getText(id) : data;
        } else{
            throw new Error("unsupported type: " + type);
        }

        item.appendChild(rm);
        item.appendChild(cp);
        this.appendChild(item);
    },


});

window.addEventListener("paste", async function onPaste(e){
    function printInfo(i, t, s){
        if(s.length > 60){
            s = s.slice(0, 60) + "...";
        }
        console.log(`paste item #${i} <${t}>: ${s}`);
    }

    var data = (e.clipboardData || window.clipboardData ||
            e.originalEvent && e.originalEvent.clipboardData);
    var items = data && data.items;

    let text = data.getData("text");
    if(text){
        printInfo(-1, "string", text);
        PasteBoard.add("text/plain", text);
        return;
    }

    if(!items || !items.length){
        console.warn("paste event triggered but no items received");
        return;
    }

    console.log("data trasnsfer list:", items);

    for(const [i, item] of Array.prototype.entries.call(items)){
        if(item.kind === "string" && item.type.match(/^text/)){
            text = await new Promise(resolve => item.getAsString(resolve));
            // text = await item.getAsString(txt => ({ then(){ return txt; } }));
            printInfo(i, "string", text);
        } else if(item.kind == "file"){
            var f = item.getAsFile();
            printInfo(i, "file<buffer>", f);
            PasteBoard.add(f.type, f, f.name);
        }
    }
});


(async () => {
    login_button.innerText = "login";
    while(!access_token ||
        await access_token.state === "pending"
    ) await sleep(200);
    console.log("access token resolved:", await access_token);
    console.log("%ccontinue main thread jobs", "color: #2f2;");
    login_button.innerText = "logout";

    PasteInfo.on("add", async id => {
        console.log("add");
        let o = PasteInfo[id];
        PasteBoard.add(o.type, null, o.name, o.location, id, false);
    }).on("remove", id => {
        console.log("remove");
    }).on("change", list_or_id => {
        console.log("change");
    }).startListening();

})();

console.log('trace:', console.trace());
function unused(){

(async () => {
    await [...Array(5).keys()].forEach(async i => {
        console.log(`started task #${i}`);
        console.log(`task #${i} lasted ${
            await (t => new Promise(resolve =>
                setTimeout(resolve, t, t)))(Math.random() * 5000)
        }`);
        console.log(`ended task #${i}`);
    });
    console.log("after code block");
})();


(async () => {
    let a = await new Promise(resolve => Promise.resolve(resolve));
})();

(async () => {
    let func3 = async function*(n){
        for(let i of [...Array(n).keys()]){
            yield new Promise(resolve => setTimeout(
                    resolve, Math.random() * 2000, i));
        }
        return;
    };

    let g = func3(5);
    let l = [];
    for await (let p of g){
        console.log(p);
        l.push(p);
    }
    console.log(l);
})();

(async () => {
    let func3 = function*(n){
        for(let i of [...Array(n).keys()]){
            yield new Promise(resolve => setTimeout(
                    resolve, Math.random() * 2000, i));
        }
        return;
    };

    let i = 5;
    while(i--) console.log(await Promise.race(func3(5)));

})();

(() => {
    class c{ constructor(){
        Object.defineProperty(this, "a", { value: 2 });
        this.b = 3;
    }}
    let o = new c();
    console.log(JSON.stringify(o));
    console.log("o == {b:3}?", o == {b:3});
    console.log("o == {a:2, b:3}?", o == {a:2, b:3});
})();

}

document.addEventListener("load", e => {
    console.log("document laoded");
});


console.log(`"onhashchange" in window: ${"onhashchange" in window}`);
window.addEventListener("hashchange", (e) =>{
  console.log("hash: " + window.location.hash);
}, false);
console.log(`window.onhashchange: ${window.onhashchange}`);
window.location.hash = "HI";
</script>
</body>
</html>